

function sysCall_init()--Called once at the start to assign object handles to variables
    
    binMover=sim.getObjectAssociatedWithScript(sim.handle_self)
    leftMotor=sim.getObjectHandle("binMover_leftMotor")
    rightMotor=sim.getObjectHandle("binMover_rightMotor")
    noseSensor=sim.getObjectHandle("binMover_sonicSensor")
    backUntilTime=-1 
    floorSensorHandles={-1,-1,-1}--light sensors placed in array
    floorSensorHandles[1]=sim.getObjectHandle("binMover_leftSensor")
    floorSensorHandles[2]=sim.getObjectHandle("binMover_middleSensor")
    floorSensorHandles[3]=sim.getObjectHandle("binMover_rightSensor")

    --Sets definitions for speed values
    speed = 0
    rightV = 0
    leftV = 0
    stopped = false

    
end

function sysCall_actuation()--loop 

    if (stopped == false) then
        speed=2--sets base speed
        rightV=speed --sets base right hand wheel velocity
        leftV=speed --sets base left hand wheel velocity
    end

    result=sim.readProximitySensor(noseSensor)
    if (result>0) then
        speed=0
        leftV=0
        rightV=0
    end


    sensorReading={false,false,false}
    for i=1,3,1 do --reads left and right sensors
        result,data=sim.readVisionSensor(floorSensorHandles[i])
        if (result>=0) then
            sensorReading[i]=(data[11]<0.3)--saves reading for sensor if the light intensity is less than 0.3
        end
        print(sensorReading[i])
    end



    if sensorReading[1] then --if the data from the left sensor is too low reduces left hand wheel speed
        leftV=0.03*speed
    end
    if sensorReading[3] then --if the data from the right sensor is too low reduces right hand wheel speed
        rightV=0.03*speed
    end
    if sensorReading[1] and sensorReading[3] then
        speed = 0
        leftV=0
        rightV=0
        stopped = true
    end

    if (backUntilTime<sim.getSimulationTime()) then--goes forward in forward mode
        
        sim.setJointTargetVelocity(leftMotor,leftV)
        sim.setJointTargetVelocity(rightMotor,rightV)
    else --reverse, unneeded might remove
        
        sim.setJointTargetVelocity(leftMotor,-speed/2)
        sim.setJointTargetVelocity(rightMotor,-speed/8)
    end


end

